{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","useState","currentPosition","setCurrentPosition","carouselContainerStyles","width","transitionDuration","carouselListStyles","length","height","transform","carouselWrapperStyles","className","style","map","image","index","src","alt","type","onClick","newPosition","Math","max","disabled","remainingImages","ceil","min","App","state","handleInputChange","event","target","id","setState","value","prevState","this","action","htmlFor","name","onChange","defaultChecked","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfb64be9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const [currentPosition, setCurrentPosition] = useState(0);\n\n  const handlePrevClick = () => {\n    const newPosition = currentPosition - itemWidth * step;\n\n    if (infinite) {\n      setCurrentPosition(\n        newPosition < 0\n          ? (images.length - frameSize) * itemWidth\n          : newPosition,\n      );\n    } else {\n      setCurrentPosition(Math.max(newPosition, 0));\n    }\n  };\n\n  const handleNextClick = () => {\n    const remainingImages = images.length\n    - Math.ceil(currentPosition / itemWidth);\n\n    let newPosition;\n\n    if (infinite) {\n      if (remainingImages < step) {\n        newPosition = 0;\n      } else {\n        newPosition = currentPosition + itemWidth * step;\n        newPosition\n        = newPosition >= images.length * itemWidth\n            ? 0\n            : newPosition;\n      }\n    } else {\n      newPosition = currentPosition + itemWidth * step;\n      newPosition = Math.min(\n        newPosition,\n        (images.length - frameSize) * itemWidth,\n      );\n    }\n\n    setCurrentPosition(newPosition);\n  };\n\n  const carouselContainerStyles = {\n    width: `${itemWidth * frameSize}px`,\n    transitionDuration: `${animationDuration}ms`,\n  };\n\n  const carouselListStyles = {\n    width: `${itemWidth * images.length}px`,\n    height: `${itemWidth}px`,\n    transitionDuration: `${animationDuration}ms`,\n    transform: `translateX(-${currentPosition}px)`,\n  };\n\n  const carouselWrapperStyles = {\n    width: `${itemWidth * frameSize}px`,\n  };\n\n  return (\n    <div className=\"Carousel\" style={carouselContainerStyles}>\n      <div className=\"Carousel__wrapper\" style={carouselWrapperStyles}>\n        <ul className=\"Carousel__list\" style={carouselListStyles}>\n          {images.map((image: string, index: number) => (\n            <li key={image} className=\"Carousel__item\">\n              <img\n                src={image}\n                alt={`${index}`}\n                width={itemWidth}\n                className=\"Carousel__image\"\n              />\n            </li>\n          ))}\n        </ul>\n        <div className=\"Carousel__btns\">\n          <button\n            className=\"Carousel__btn\"\n            type=\"button\"\n            onClick={handlePrevClick}\n            disabled={!infinite && currentPosition === 0}\n          >\n            &lt;\n          </button>\n          <button\n            className=\"Carousel__btn\"\n            type=\"button\"\n            onClick={handleNextClick}\n            data-cy=\"next\"\n            disabled={\n              !infinite\n                && currentPosition >= (itemWidth * (images.length - frameSize))\n            }\n          >\n            &gt;\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    switch (event.target.id) {\n      case 'stepId':\n        this.setState({ step: +event.target.value });\n        break;\n      case 'frameId':\n        this.setState({ frameSize: +event.target.value });\n        break;\n      case 'itemId':\n        this.setState({ itemWidth: +event.target.value });\n        break;\n      case 'animationDuration':\n        this.setState({ animationDuration: +event.target.value });\n        break;\n      case 'infinite':\n        this.setState((prevState) => ({\n          infinite: !prevState.infinite,\n        }));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    const { handleInputChange } = this;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <form action=\"#\" className=\"App__form\">\n          <label className=\"App__label\" htmlFor=\"itemId\">\n            Item Width\n            <input\n              type=\"number\"\n              id=\"itemId\"\n              name=\"itemId\"\n              min=\"50\"\n              max=\"200\"\n              className=\"App__input\"\n              step=\"5\"\n              value={itemWidth}\n              onChange={handleInputChange}\n            />\n          </label>\n          <label className=\"App__label\" htmlFor=\"frameId\">\n            Frame size\n            <input\n              type=\"number\"\n              id=\"frameId\"\n              name=\"frameId\"\n              min=\"1\"\n              max=\"10\"\n              className=\"App__input\"\n              value={frameSize}\n              onChange={handleInputChange}\n            />\n          </label>\n          <label className=\"App__label\" htmlFor=\"stepId\">\n            Step\n            <input\n              type=\"number\"\n              id=\"stepId\"\n              name=\"stepId\"\n              min=\"1\"\n              max=\"9\"\n              className=\"App__input\"\n              value={step}\n              onChange={handleInputChange}\n            />\n          </label>\n          <label className=\"App__label\" htmlFor=\"animationDuration\">\n            Animation duration\n            <input\n              type=\"number\"\n              id=\"animationDuration\"\n              name=\"animationDuration\"\n              className=\"App__input\"\n              value={animationDuration}\n              onChange={handleInputChange}\n            />\n          </label>\n          <label className=\"App__label App__label--infinite\" htmlFor=\"infinite\">\n            Infinite\n            <input\n              type=\"checkbox\"\n              id=\"infinite\"\n              name=\"infinite\"\n              className=\"App__input\"\n              defaultChecked={infinite}\n              onChange={handleInputChange}\n            />\n          </label>\n        </form>\n\n        <Carousel\n          images={images}\n          step={step}\n          itemWidth={itemWidth}\n          frameSize={frameSize}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}